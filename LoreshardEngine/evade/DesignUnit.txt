Design Unit




Abstract class:  a class in which no object can be instantiated
* To define an abstract class:  public abstract Animal
* A class must be declared abstract if it has even one abstract method.
* An abstract class is inherited with the keyword extends.
* The first concrete class must implement all of the abstract methods above it.
* An abstract class can have both abstract and non-abstract methods.


Abstract method:  a bodiless method that must be overridden in another class to be used
* To define an abstract method:  public abstract void eat( );  (note the semi-colon… no body)
* If a method is declare abstract, the class it’s in must be abstract as well
* Implementing an abstract method is just like overriding a method.


Abstraction:  an essential pillar of object-oriented programming.  It refers to the ability to write code more efficiently by using inheritance.  Common elements of the subclasses are abstracted into one or more superclasses.


Access modifier:  The three most important of these are public (can be seen by the entire world), private (can be seen by no one outside the class) and protected (can be seen by class and subclasses only)


Cast:  a cast can be used to assign a reference variable of one type to another.  Example:  (int) variable = 2.4


Composition:  another essential pillar of object-oriented programming.  It is the act of putting classes together that have a HAS-A relationship instead of an IS-A (inheritance) relationship.  The objects get their behavior by being composed with the right behavior objects.


Concrete class:  a class in which an object can be instantiated


Design principles:  rules of thumb to organize a program prior to coding it
* Identify the aspects of your application that vary and separate them from those aspects that stay the same
* Program to an interface, not to an implementation
* Favor composition over inheritance


Exposing a method:  a method is exposed if it’s accessible outside the class.  This is most commonly done by making the method public.


Extends:  the keyword that signifies inheritance.  A subclass extends a superclass.


Final class:  a class that cannot be extended.
* To define a final class:  public final class Dog


Final method:  a method that can never be overridden
* To define a final method:  final Dog makeNoise( )


HAS-A:  a test to determine if one class possesses the instance variable of another.  Example:  Bathroom HAS-A Tub means that Tub should possess the variables of Bathroom.


Implementation:  this refers to the level of the actual object being instantiated


Inheritance:  the process by which a subclass automatically assumes the instance variables and methods of its superclass(es).
* Only public instance variables and methods are inherited, not private ones.


Interface: a 100% pure abstract class (all the methods are abstract)
* To define an interface:  public interface Pet (use “interface” instead of “class”)
* To implement an interface:  public class Dog extends Canine implements Pet
* A class that implements an interface must implement all the methods of that interface.
* All interface methods are implicitly public and abstract.
* Classes can implement multiple interfaces, even from different inheritance trees.
* Roses are red; violets are blue.  Extend only one, but implement two.


IS-A:  a test to determine if inheritance takes place.  Example:  Cat IS-A Feline, so Cat extends Feline.


Object class:  the Object class is the ultimate superclass of all Java classes


Overloaded methods:  methods are overloaded if they have the same name but different argument lists.  You see many examples of this in Our Friend, the Java API. 


String
	substring(int beginIndex)
Returns a new string that is a substring of this string.
	String
	substring(int beginIndex, int endIndex)
Returns a new string that is a substring of this string.
	

There’s no polymorphism involved with overloaded methods.
* Overloaded methods can have different return types.
* You can vary the access levels in any direction.


Overridden method:  a method that has the same name but different functionality from its parent class
* arguments must be the same, and return types must be compatible.
* the method can’t be less accessible ( the four access modifiers, from least to most restrictive, are: public, protected, default, and private)
* overriding a method is just like implementing an abstract method
* To invoke the method of a superclass from a subclass that has overridden that method, use the super keyword (ex. super.runReport( );)


Polymorphism (lit. “many shapes”): the ability of a reference type to be the superclass of the actual object type.  Example:  animals [2] = new Cat( );
* You can have polymorphic arguments and return types.
* You can only call methods on on object if the class of the reference variable has that method.  You might want to call animal methods or cat methods in the above example.


Protected:  the access modifier that allows stuff to be seen by class and subclasses only, but not the world at large


Subclass:  a class that extends (inherits from) another class.  Some other languages refer to this as a child class.
* A subclass can have only one superclass directly above it, though there could be others above that.
* To invoke the method of a superclass from a subclass that has overridden that method, use the super keyword (ex. super.runReport( );)


Super:  Java keyword used to invoke the method of a superclass from a subclass that has overridden that method (ex. super.runReport( );)


Superclass:  a class that is extended (inherited) from.  Some other languages refer to this as a parent class.
* A superclass can have any number of subclasses.